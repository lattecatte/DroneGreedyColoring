# -*- coding: utf-8 -*-

import numpy as np 
import matplotlib.pyplot as plt
from matplotlib.ticker import MaxNLocator

def best_fit(X, Y):

    xbar = sum(X)/len(X)
    ybar = sum(Y)/len(Y)
    n = len(X) # or len(Y)

    numer = sum([xi*yi for xi,yi in zip(X, Y)]) - n * xbar * ybar
    denum = sum([xi**2 for xi in X]) - n * xbar**2

    b = numer / denum
    a = ybar - b * xbar

    print('y = {:.3f} + {:.3f}x'.format(a, b))

    return a, b

x = [0.298,0.5,0.688,0.96,1.16,1.362,
     0.457,0.907,1.346,1.782,2.224,2.663,
     0.683,1.353,2.042,2.705,3.343,4,
     0.9305,1.833,2.72,3.594,4.458,5.289,
     1.151,2.292,3.409,4.465,5.527,6.569,
     1.365,2.755,4.101,5.368,6.619,7.813,
     1.557,3.135,4.645,6.164,7.611,9.045,
     1.802,3.614,5.3785,7.127,8.813,10.422,
     2.044,4.06,6.056,8.035,9.905,11.771,
     2.22,4.442,6.601,8.704,10.737,12.7762]

y = [3,3,3,3,4,4,
     3,3,4,4,4,5,
     3,4,4,5,5,5,
     4,4,4,5,6,6,
     3,4,5,6,6,7,
     4,5,5,6,7,8,
     4,5,6,7,8,8,
     4,5,6,7,8,9,
     4,6,7,8,9,9,
     4,6,7,8,9,11]

a, b = best_fit(x, y)


x2h = [0.106,0.176,0.260,0.374,0.452,0.516,
       0.175,0.325,0.489,0.651,0.821,1.016,
       0.233,0.472,0.735,1.001,1.252,1.501,
       0.342,0.680,0.989,1.315,1.655,1.977,
       0.399,0.826,1.240,1.662,2.082,2.486,
       0.477,0.988,1.518,1.995,2.481,2.960,
       0.557,1.128,1.686,2.269,2.853,3.444,
       0.652,1.302,1.975,2.638,3.307,3.953,
       0.728,1.484,2.217,2.972,3.714,4.465,
       0.783,1.596,2.418,3.217,4.018,4.834]

y2h =[4,4,5,5,5,5,
      4,5,5,6,6,7,
      5,5,6,7,7,7,
      5,6,6,7,7,8,
      5,6,7,7,9,9,
      5,7,7,9,9,9,
      5,7,7,9,9,9,
      6,7,9,9,9,11,
      7,7,9,9,9,11,
      6,7,9,9,11,11]

a2h, b2h = best_fit(x2h, y2h)


x3h = [0.040,0.074,0.070,0.144,0.182,0.194,
       0.073,0.134,0.182,0.239,0.299,0.371,
       0.089,0.161,0.249,0.331,0.414,0.497,
       0.117,0.227,0.343,0.461,0.572,0.685,
       0.134,0.274,0.420,0.550,0.678,0.814,
       0.162,0.330,0.502,0.662,0.832,0.992,
       0.192,0.392,0.584,0.786,0.980,1.176,
       0.214,0.435,0.670,0.894,1.119,1.343,
       0.252,0.514,0.782,1.043,1.301,1.546,
       0.259,0.522,0.772,1.036,1.292,1.562]

y3h = [6,6,7,6,7,7,
       6,7,7,7,7,7,
       6,6,7,7,9,9,
       7,7,8,9,10,10,
       7,7,8,10,10,10,
       7,7,9,10,10,10,
       7,9,10,10,10,11,
       7,10,10,10,11,13,
       7,10,10,10,11,13,
       7,10,10,10,13,13]

a3h, b3h = best_fit(x3h, y3h)

x4h = [0.024,0.040,0.072,0.106,0.132,0.154,
       0.051,0.088,0.123,0.167,0.211,0.258,
       0.069,0.123,0.189,0.263,0.331,0.488,
       0.096,0.184,0.267,0.356,0.458,0.536,
       0.114,0.230,0.338,0.442,0.554,0.659,
       0.127,0.266,0.402,0.527,0.655,0.790,
       0.148,0.313,0.459,0.624,0.796,0.966,
       0.175,0.351,0.540,0.714,0.895,1.081,
       0.204,0.408,0.615,0.821,1.029,1.235,
       0.213,0.427,0.643,0.861,1.072,1.299]

y4h = [7,8,8,8,9,9,
       8,8,9,9,9,9,
       8,8,9,9,9,9,
       9,9,9,9,10,13,
       8,9,9,10,12,13,
       9,9,9,13,13,13,
       9,9,9,13,13,13,
       9,9,13,13,13,13,
       9,9,13,13,13,13,
       9,9,13,13,13,13]

a4h, b4h = best_fit(x4h, y4h)


fig = plt.figure(figsize = (10, 10)) 
ax = fig.gca()

ax.scatter(x, y, color = "k", s=20, label="single")
ax.scatter(x2h, y2h, color = "b", s=20, label="federated (2 UTMSPs)")
ax.scatter(x3h, y3h, color = "r", s=20, label="federated (3 UTMSPs)")
ax.scatter(x4h, y4h, color = "g", s=20, label="federated (4 UTMSPs)")

fit = [a + b * xi for xi in x]
fit2h = [a2h + b2h * xi for xi in x2h]
fit3h = [a3h + b3h * xi for xi in x3h]
fit4h = [a4h + b4h * xi for xi in x4h]

xmin, xmax = 0, 14
ymin, ymax = 0, 20
ax.set_xlim(xmin, xmax)
ax.set_ylim(ymin, ymax)
ax.set_xlabel('average number of conflicts per operation', size=16)
ax.set_ylabel('number of layers needed', size=16)
ax.tick_params(axis='both', which='major', labelsize=14)
ax.tick_params(axis='both', which='minor', labelsize=14)

ax.yaxis.set_major_locator(MaxNLocator(integer=True))

leg = ax.legend(fontsize=14);
plt.grid()
plt.axes().set_aspect('equal')
plt.show() 